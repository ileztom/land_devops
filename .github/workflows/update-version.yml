name: Update changelog
on:
  workflow_call:
    inputs:
      release_branch:
        required: true
        type: string
        description: "Release branch name"
    outputs:
      tag: 
        description: "Version tag"
        value: ${{ jobs.update-version.outputs.tag }}
      commit_msg: 
        description: "Commit message"
        value: ${{ jobs.update-version.outputs.commit_msg }}

env:
  CHANGELOG_FILE: changelog.md
  VERSION_CATALOG: ${{ github.workspace }}/version
  VERSION_SCRIPT: .github/workflows/version_up.py
  MINOR: minor
  PATCH: patch
    
jobs: 
  update-version:
    name: (VER) Version UP
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      tag: ${{steps.get-commit-txt.outputs.TAG_MSG}}
      commit_msg: ${{steps.get-commit-txt.outputs.COMMIT_MSG}}
    steps:     
      - name: Сheckout on [${{ inputs.release_branch }}]
        uses: actions/checkout@v4
    
      - name: Get branch names
        id: branch-names
        uses: tj-actions/branch-names@v8

      - name: Print catalog's info
        run : |
          echo "path to version file ${{ env.VERSION_CATALOG }}"
          
      - name: Install and Setup python 
        uses: actions/setup-python@v1
        with:
          python-version: "3.10"
    
      - name: Update version [minor]
        if: startsWith(steps.branch-names.outputs.current_branch, 'feature')
        run: 
          python ${{ env.VERSION_SCRIPT }} ${{ env.VERSION_CATALOG }} upgrade_version ${{ env.MINOR }} "${{ github.event.pull_request.title }}"
 
      - name: Update version [patch]
        if: startsWith(steps.branch-names.outputs.current_branch, 'hotfix')
        run:
          python ${{ env.VERSION_SCRIPT }} ${{ env.VERSION_CATALOG }} upgrade_version ${{ env.PATCH }} "${{ github.event.pull_request.title }}"
      
      - name: Save Version and Log to env
        id: get-commit-txt
        run: | 
          COMMIT_MSG=$(python ${{ env.VERSION_SCRIPT }} ${{ env.VERSION_CATALOG }} get_last_log_msg)
          TAG_MSG=$(python ${{ env.VERSION_SCRIPT }} ${{ env.VERSION_CATALOG }} get_current_version)
          echo "COMMIT_MSG=${COMMIT_MSG}" >> $GITHUB_ENV
          echo "TAG_MSG=${TAG_MSG}" >> $GITHUB_ENV
          echo "TAG_MSG=${TAG_MSG}" >> $GITHUB_OUTPUT
          echo "COMMIT_MSG=${COMMIT_MSG}" >> $GITHUB_OUTPUT
      
      - name: Setup git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      - name: Update [version] and put [tag]. Commit and push
        run: |
          git add .
          git commit -m "${{ env.COMMIT_MSG }}"
          git tag -a v${{ env.TAG_MSG }} -m "update tag"
          git push -u origin ${{ inputs.release_branch }} --tags 

  udpate_changelog:
    name: (VER) Changelog update
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
    runs-on: ubuntu-latest
    needs: update-version
    steps:  
      - name: Сheckout on [${{ inputs.release_branch }}]
        uses: actions/checkout@v4

      - name: Pull commits
        run: 
          git pull
      
      - name: Update changelog.md
        run: | 
          echo $'\n'"---" | cat - ${{ env.CHANGELOG_FILE }} > temp && mv temp ${{ env.CHANGELOG_FILE }}
          echo "#### [${{ needs.update-version.outputs.tag }}] - [$(date +"%d.%m.%Y %H:%M:%S")]    ${{ github.event.pull_request.head.ref }}" $'\n'${{ needs.update-version.outputs.commit_msg }} | cat - ${{ env.CHANGELOG_FILE }} > temp && mv temp ${{ env.CHANGELOG_FILE }}
      
      - name: Setup git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
      
      - name: Commit and push
        run: |
          git add .
          git commit -m "[${{ needs.update-version.outputs.tag }}] ${{ env.CHANGELOG_FILE }}"
          git push -u origin ${{ inputs.release_branch }} --tags 

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CHANGELOG_FILE }}
          path: ${{ env.CHANGELOG_FILE }}

      - uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Файл ${{ env.CHANGELOG_FILE }} был обновлен. Новая версия доступна в корне репозитория.'
            })

      - uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['changelog-${{ needs.update-version.outputs.tag }}']
            })







# name: Update changelog
# on:
#   workflow_call:
#     inputs:
#       release_branch:
#         required: true
#         type: string
#         description: "Release branch name"
#     outputs:
#       tag: 
#         description: "Version tag"
#         value: ${{ jobs.update-version.outputs.tag }}
#       commit_msg: 
#         description: "Commit message"
#         value: ${{ jobs.update-version.outputs.commit_msg }}

# env:
#   CHANGELOG_FILE: changelog.md
#   VERSION_CATALOG: ${{ github.workspace }}/version
#   VERSION_SCRIPT: .github/workflows/version_up.py
#   MINOR: minor
#   PATCH: patch
    
# jobs: 
#   update-version:
#     name: (VER) Version UP
#     permissions:
#       contents: write
#     runs-on: ubuntu-latest
#     outputs:
#       tag: ${{steps.get-commit-txt.outputs.TAG_MSG}}
#       commit_msg: ${{steps.get-commit-txt.outputs.COMMIT_MSG}}
#     steps:     
#       - name: Сheckout on [${{ inputs.release_branch }}]
#         uses: actions/checkout@v4
    
#       - name: Get branch names
#         id: branch-names
#         uses: tj-actions/branch-names@v8

#       - name: Print catalog's info
#         run : |
#           echo "path to version file ${{ env.VERSION_CATALOG }}"
          
#       - name: Install and Setup python 
#         uses: actions/setup-python@v1
#         with:
#           python-version: "3.10"
    
#       - name: Update version [minor]
#         if: startsWith(steps.branch-names.outputs.current_branch, 'feature')
#         run: 
#           python ${{ env.VERSION_SCRIPT }} ${{ env.VERSION_CATALOG }} upgrade_version ${{ env.MINOR }} "${{ github.event.pull_request.title }}"
 
#       - name: Update version [patch]
#         if: startsWith(steps.branch-names.outputs.current_branch, 'hotfix')
#         run:
#           python ${{ env.VERSION_SCRIPT }} ${{ env.VERSION_CATALOG }} upgrade_version ${{ env.PATCH }} "${{ github.event.pull_request.title }}"
      
#       # - name: Save Version and Log to env
#       #   id: get-commit-txt
#       #   run: | 
#       #     COMMIT_MSG=$(python ${{ env.VERSION_SCRIPT }} ${{ env.VERSION_CATALOG }} get_last_log_msg)
#       #     TAG_MSG=$(python ${{ env.VERSION_SCRIPT }} ${{ env.VERSION_CATALOG }} get_current_version)
#       #     echo "COMMIT_MSG=${COMMIT_MSG}" >> $GITHUB_ENV
#       #     echo "TAG_MSG=${TAG_MSG}" >> $GITHUB_ENV
#       #     echo "TAG_MSG=${TAG_MSG}" >> $GITHUB_OUTPUT
#       #     echo "COMMIT_MSG=${COMMIT_MSG}" >> $GITHUB_OUTPUT

#       - name: Get version info
#         run: |
#           # Правильный путь к файлам версий
#           VERSION_PATH="${{ github.workspace }}/version/version"
          
#           # Проверяем существование файлов
#           echo "Files in $VERSION_PATH:"
#           ls -la "$VERSION_PATH"
          
#           # Получаем данные
#           echo "Getting version info..."
#           TAG_MSG=$(python .github/workflows/version_up.py "$VERSION_PATH" get_current_version)
#           COMMIT_MSG=$(python .github/workflows/version_up.py "$VERSION_PATH" get_last_log_msg)
          
#           # Экспортируем переменные
#           echo "TAG_MSG=${TAG_MSG}" >> $GITHUB_ENV
#           echo "COMMIT_MSG=${COMMIT_MSG}" >> $GITHUB_ENV
#           echo "Version: ${TAG_MSG}"
#           echo "Commit message: ${COMMIT_MSG}"
  
#       - name: Setup git config
#         run: |
#           git config user.name "GitHub Actions Bot"
#           git config user.email "actions@github.com"
      
#       - name: Update version and push tag
#         run: |
#           # 1. Проверяем существование тега
#           if git ls-remote --tags origin "v${TAG_MSG}" | grep -q "refs/tags/v${TAG_MSG}"; then
#             echo "Tag v${TAG_MSG} already exists, skipping creation"
#             exit 0
#           fi
      
#           # 2. Обновляем файл версии
#           echo "${TAG_MSG}" > version/version/version
          
#           # 3. Добавляем изменения
#           git add version/version/version
#           git add changelog.md 2>/dev/null || true  # Игнорируем ошибку если файла нет
          
#           # 4. Создаем коммит только если есть изменения
#           if [ -n "$(git status --porcelain)" ]; then
#             git config user.name "GitHub Actions Bot"
#             git config user.email "actions@github.com"
#             git commit -m "Update version to ${TAG_MSG} [skip ci]"
#             git push origin ${{ inputs.release_branch }}
#           fi
          
#           # 5. Создаем и пушим тег
#           git tag -a "v${TAG_MSG}" -m "Version ${TAG_MSG}"
#           git push origin "v${TAG_MSG}"
#         env:
#           TAG_MSG: ${{ needs.update-version.outputs.tag }}

#   udpate_changelog:
#     name: (VER) Changelog update
#     permissions:
#       contents: write
#       pull-requests: write
#       issues: write  # Добавьте это право
#     runs-on: ubuntu-latest
#     needs: update-version
#     steps:  
#     - name: Checkout code
#       uses: actions/checkout@v4
#       with:
#         ref: ${{ inputs.release_branch }}
#         fetch-depth: 0
  
#     - name: Sync with remote
#       run: |
#         git config user.name "GitHub Actions Bot"
#         git config user.email "actions@github.com"
#         git pull origin ${{ inputs.release_branch }} --rebase
  
#     # - name: Update changelog.md
#     #   run: | 
#     #     echo "Updating changelog..."
#     #     echo -e "\n---\n" >> ${{ env.CHANGELOG_FILE }}
#     #     echo "#### [${{ needs.update-version.outputs.tag }}] - $(date +'%d.%m.%Y %H:%M:%S')" >> ${{ env.CHANGELOG_FILE }}
#     #     echo "${{ needs.update-version.outputs.commit_msg }}" >> ${{ env.CHANGELOG_FILE }}
#     - name: Update changelog.md
#       run: |
#         # Создаем временный файл с новыми изменениями
#         echo "## [v${{ needs.update-version.outputs.tag }}] - $(date +'%d.%m.%Y %H:%M:%S')" > new_changes.md
#         echo "" >> new_changes.md
#         echo "${{ needs.update-version.outputs.commit_msg }}" >> new_changes.md
#         echo "" >> new_changes.md
#         echo "---" >> new_changes.md
#         echo "" >> new_changes.md
        
#         # Объединяем с существующим changelog.md
#         if [ -f "${{ env.CHANGELOG_FILE }}" ]; then
#           cat new_changes.md ${{ env.CHANGELOG_FILE }} > temp_changelog.md
#           mv temp_changelog.md ${{ env.CHANGELOG_FILE }}
#         else
#           mv new_changes.md ${{ env.CHANGELOG_FILE }}
#         fi
        
#         # Удаляем временные файлы
#         rm -f new_changes.md temp_changelog.md
        
#         # Выводим результат для проверки
#         echo "Updated changelog content:"
#         cat ${{ env.CHANGELOG_FILE }}
  
#     - name: Commit and push changes
#       run: |
#         if [ -n "$(git status --porcelain ${{ env.CHANGELOG_FILE }})" ]; then
#           git add ${{ env.CHANGELOG_FILE }}
#           git commit -m "Update ${{ env.CHANGELOG_FILE }} for v${{ needs.update-version.outputs.tag }}"
#           git pull origin ${{ inputs.release_branch }} --rebase
#           git push origin ${{ inputs.release_branch }}
#         else
#           echo "No changes to ${{ env.CHANGELOG_FILE }}"
#         fi
  
#     - name: Add PR comment
#       if: github.event_name == 'pull_request'
#       uses: actions/github-script@v6
#       with:
#         script: |
#           github.rest.issues.createComment({
#             issue_number: context.issue.number,
#             owner: context.repo.owner,
#             repo: context.repo.repo,
#             body: '✅ Changelog updated for v${{ needs.update-version.outputs.tag }}\n\n${{ needs.update-version.outputs.commit_msg }}'
#           })
#     # steps:  
#     #   - name: Checkout code
#     #     uses: actions/checkout@v4
#     #     with:
#     #       ref: ${{ inputs.release_branch }}

#     #   - name: Find associated PR
#     #     id: find-pr
#     #     uses: actions/github-script@v6
#     #     with:
#     #       script: |
#     #         // Ищем PR, связанный с этим workflow run
#     #         const { data: prs } = await github.rest.pulls.list({
#     #           owner: context.repo.owner,
#     #           repo: context.repo.repo,
#     #           state: 'open',
#     #           head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
#     #         });
#     #         return prs[0]?.number || 0;

#     #   - name: Update changelog.md
#     #     run: | 
#     #       echo $'\n'"---" | cat - ${{ env.CHANGELOG_FILE }} > temp && mv temp ${{ env.CHANGELOG_FILE }}
#     #       echo "#### [${{ needs.update-version.outputs.tag }}] - [$(date +"%d.%m.%Y %H:%M:%S")]    ${{ github.event.pull_request.head.ref || 'main' }}" $'\n'${{ needs.update-version.outputs.commit_msg }} | cat - ${{ env.CHANGELOG_FILE }} > temp && mv temp ${{ env.CHANGELOG_FILE }}

#     #   - name: Commit changes
#     #     run: |
#     #       git config user.name "GitHub Actions Bot"
#     #       git config user.email "actions@github.com"
#     #       git add ${{ env.CHANGELOG_FILE }}
#     #       git commit -m "Update ${{ env.CHANGELOG_FILE }} for v${{ needs.update-version.outputs.tag }}"
#     #       git push origin ${{ inputs.release_branch }}

#     #   - name: Add comment to PR
#     #     if: steps.find-pr.outputs.result != 0
#     #     uses: actions/github-script@v6
#     #     with:
#     #       script: |
#     #         github.rest.issues.createComment({
#     #           issue_number: ${{ steps.find-pr.outputs.result }},
#     #           owner: context.repo.owner,
#     #           repo: context.repo.repo,
#     #           body: 'Файл ${{ env.CHANGELOG_FILE }} обновлен до версии ${{ needs.update-version.outputs.tag }}.\n\nИзменения: ${{ needs.update-version.outputs.commit_msg }}'
#     #         })

#     #   - name: Add label to PR
#     #     if: steps.find-pr.outputs.result != 0
#     #     uses: actions/github-script@v6
#     #     with:
#     #       script: |
#     #         github.rest.issues.addLabels({
#     #           issue_number: ${{ steps.find-pr.outputs.result }},
#     #           owner: context.repo.owner,
#     #           repo: context.repo.repo,
#     #           labels: ['changelog-updated']
#     #         })
